import java.util.Scanner;
class Node {
    int[] keys;
    Node[] children;
    int numKeys;
    boolean leaf;

    Node(int t, boolean leaf) {
        this.keys = new int[2 * t - 1];
        this.children = new Node[2 * t];
        this.numKeys = 0;
        this.leaf = leaf;
    }

    boolean isLeaf() {
        return leaf;
    }
}

 class TwoThreeTree {
    private Node root;
    private int t; // Minimum degree

    public TwoThreeTree(int t) {
        this.root = null;
        this.t = t;
    }

    public void insert(int key) {
        if (root == null) {
            root = new Node(t, true);
            root.keys[0] = key;
            root.numKeys = 1;
        } else {
            if (root.numKeys == 2 * t - 1) {
                Node newRoot = new Node(t, false);
                newRoot.children[0] = root;
                splitChild(newRoot, 0);
                int i = 0;
                if (newRoot.keys[0] < key)
                    i++;
                insertNonFull(newRoot.children[i], key);
                root = newRoot;
            } else {
                insertNonFull(root, key);
            }
        }
    }

    private void insertNonFull(Node node, int key) {
        int i = node.numKeys - 1;
        if (node.isLeaf()) {
            while (i >= 0 && key < node.keys[i]) {
                node.keys[i + 1] = node.keys[i];
                i--;
            }
            node.keys[i + 1] = key;
            node.numKeys++;
        } else {
            while (i >= 0 && key < node.keys[i]) {
                i--;
            }
            i++;
            if (node.children[i].numKeys == 2 * t - 1) {
                splitChild(node, i);
                if (key > node.keys[i])
                    i++;
            }
            insertNonFull(node.children[i], key);
        }
    }

    private void splitChild(Node parent, int index) {
        Node node = parent.children[index];
        Node newNode = new Node(t, node.isLeaf());
        newNode.numKeys = t - 1;
        for (int j = 0; j < t - 1; j++) {
            newNode.keys[j] = node.keys[j + t];
        }
        if (!node.isLeaf()) {
            for (int j = 0; j < t; j++) {
                newNode.children[j] = node.children[j + t];
            }
        }
        node.numKeys = t - 1;
        for (int j = parent.numKeys; j >= index + 1; j--) {
            parent.children[j + 1] = parent.children[j];
        }
        parent.children[index + 1] = newNode;
        for (int j = parent.numKeys - 1; j >= index; j--) {
            parent.keys[j + 1] = parent.keys[j];
        }
        parent.keys[index] = node.keys[t - 1];
        parent.numKeys++;
    }

    public boolean search(int key) {
        return search(root, key);
    }

    private boolean search(Node node, int key) {
        int i = 0;
        while (i < node.numKeys && key > node.keys[i]) {
            i++;
        }
        if (i < node.numKeys && key == node.keys[i]) {
            return true;
        }
        if (node.isLeaf()) {
            return false;
        }
        return search(node.children[i], key);
    }

    public void delete(int key) {
        if (root == null) {
            return;
        }
        delete(root, key);
        if (root.numKeys == 0) {
            if (root.isLeaf()) {
                root = null;
            } else {
                root = root.children[0];
            }
        }
    }

    private void delete(Node node, int key) {
        int index = findKeyIndex(node, key);
        if (index < node.numKeys && node.keys[index] == key) {
            if (node.isLeaf()) {
                removeFromLeaf(node, index);
            } else {
                removeFromNonLeaf(node, index);
            }
        } else {
            if (node.isLeaf()) {
                return;
            }
            boolean isLast = (index == node.numKeys);
            if (node.children[index].numKeys < t) {
                fill(node, index);
            }
            if (isLast && index > node.numKeys) {
                delete(node.children[index - 1], key);
            } else {
                delete(node.children[index], key);
            }
        }
    }

    private int findKeyIndex(Node node, int key) {
        int index = 0;
        while (index < node.numKeys && node.keys[index] < key) {
            ++index;
        }
        return index;
    }

    private void removeFromLeaf(Node node, int index) {
        for (int i = index + 1; i < node.numKeys; ++i) {
            node.keys[i - 1] = node.keys[i];
        }
        node.numKeys--;
    }

    private void removeFromNonLeaf(Node node, int index) {
        int key = node.keys[index];
        if (node.children[index].numKeys >= t) {
            int pred = getPredecessor(node, index);
            node.keys[index] = pred;
            delete(node.children[index], pred);
        } else if (node.children[index + 1].numKeys >= t) {
            int succ = getSuccessor(node, index);
            node.keys[index] = succ;
            delete(node.children[index + 1], succ);
        } else {
            merge(node, index);
            delete(node.children[index], key);
        }
    }

    private int getPredecessor(Node node, int index) {
        Node curr = node.children[index];
        while (!curr.isLeaf()) {
            curr = curr.children[curr.numKeys];
        }
        return curr.keys[curr.numKeys - 1];
    }

    private int getSuccessor(Node node, int index) {
        Node curr = node.children[index + 1];
        while (!curr.isLeaf()) {
            curr = curr.children[0];
        }
        return curr.keys[0];
    }

    private void fill(Node node, int index) {
        if (index != 0 && node.children[index - 1].numKeys >= t) {
            borrowFromPrev(node, index);
        } else if (index != node.numKeys && node.children[index + 1].numKeys >= t) {
            borrowFromNext(node, index);
        } else {
            if (index != node.numKeys) {
                merge(node, index);
            } else {
                merge(node, index - 1);
            }
        }
    }

    private void borrowFromPrev(Node node, int index) {
        Node child = node.children[index];
        Node sibling = node.children[index - 1];
        for (int i = child.numKeys - 1; i >= 0; --i) {
            child.keys[i + 1] = child.keys[i];
        }
        if (!child.isLeaf()) {
            for (int i = child.numKeys; i >= 0; --i) {
                child.children[i + 1] = child.children[i];
            }
        }
        child.keys[0] = node.keys[index - 1];
        if (!child.isLeaf()) {
            child.children[0] = sibling.children[sibling.numKeys];
        }
        node.keys[index - 1] = sibling.keys[sibling.numKeys - 1];
        child.numKeys++;
        sibling.numKeys--;
    }

    private void borrowFromNext(Node node, int index) {
        Node child = node.children[index];
        Node sibling = node.children[index + 1];
        child.keys[child.numKeys] = node.keys[index];
        if (!child.isLeaf()) {
            child.children[child.numKeys + 1] = sibling.children[0];
        }
        node.keys[index] = sibling.keys[0];
        for (int i = 1; i < sibling.numKeys; ++i) {
            sibling.keys[i - 1] = sibling.keys[i];
        }
        if (!sibling.isLeaf()) {
            for (int i = 1; i <= sibling.numKeys; ++i) {
                sibling.children[i - 1] = sibling.children[i];
            }
        }
        child.numKeys++;
        sibling.numKeys--;
    }

    private void merge(Node node, int index) {
        Node child = node.children[index];
        Node sibling = node.children[index + 1];
        child.keys[t - 1] = node.keys[index];
        for (int i = 0; i < sibling.numKeys; ++i) {
            child.keys[i + t] = sibling.keys[i];
        }
        if (!child.isLeaf()) {
            for (int i = 0; i <= sibling.numKeys; ++i) {
                child.children[i + t] = sibling.children[i];
            }
        }
        for (int i = index + 1; i < node.numKeys; ++i) {
            node.keys[i - 1] = node.keys[i];
        }
        for (int i = index + 2; i <= node.numKeys; ++i) {
            node.children[i - 1] = node.children[i];
        }
        child.numKeys += sibling.numKeys + 1;
        node.numKeys--;
    }

 class Main {
    public void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the minimum degree of the 2-3 tree: ");
        int degree = scanner.nextInt();
        TwoThreeTree tree = new TwoThreeTree(degree);

        boolean running = true;
        while (running) {
            System.out.println("Choose operation:");
            System.out.println("1. Insert");
            System.out.println("2. Delete");
            System.out.println("3. Search");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter key to insert: ");
                    int insertKey = scanner.nextInt();
                    tree.insert(insertKey);
                    System.out.println("Key inserted successfully.");
                    break;
                case 2:
                    System.out.print("Enter key to delete: ");
                    int deleteKey = scanner.nextInt();
                    tree.delete(deleteKey);
                    System.out.println("Key deleted successfully.");
                    break;
                case 3:
                    System.out.print("Enter key to search: ");
                    int searchKey = scanner.nextInt();
                    boolean found = tree.search(searchKey);
                    if (found) {
                        System.out.println("Key found in the tree.");
                    } else {
                        System.out.println("Key not found in the tree.");
                    }
                    break;
                case 4:
                    running = false;
                    System.out.println("Exiting program.");
                    break;
                default:
                    System.out.println("Invalid choice. Please choose again.");
            }
        }
        scanner.close();
    }
}
}